"""Data module.

The data loading interface and, ListData simple data implementation for wrapping basic python lists.

"""
from __future__ import annotations

import abc
import dataclasses
import jax
import numpy as np
from typing import Callable


@dataclasses.dataclass
class Spec:
    """A dataspec object describing elements of a dataset."""
    shape: tuple[..., int]
    dtype: np.dtype


class Data(abc.ABC):
    """Data Interface.

    Any data loader must implement this interface to be used with a trainer module.
    We mirror parts of the interface for a tf.data.Dataset object but in pure python.
    The goal is to remove TF as dependency but still be able to interop with tf.data.
    """
    @abc.abstractmethod
    def cardinality(self) -> int:
        """The cardinality of the dataset

        Returns:
            The cardinality of the data set, if unknown return -1.
        """

    @property
    @abc.abstractmethod
    def element_spec(self) -> dict:
        """Gives info about the shape and type of the data.

        Returns:
            The spec of the elements in the dataset
        """

    @abc.abstractmethod
    def as_numpy_iterator(self) -> iter:
        """Return an iterator that yields numpy data.

        Returns:
            An iterator object yielding elements of the dataset
        """

    @abc.abstractmethod
    def take(self, n: int) -> Data:
        """Take the first n elements.

        Args:
            n: The number of elements to data

        Returns:
            A new dataset (or view onto) with only n elements
        """

    @abc.abstractmethod
    def map(self, f: Callable, *args, **kwargs) -> Data:
        """Map the function f over elements of the dataset.

        The new dataset looks like `new_data = [f(x) for x in data]`

        Args:
            f: The function to apply to elements of the dataset

        Returns:
            A new dataset (or view onto) with elements transformed by function f
        """


class ListData(Data):
    """A simple implementation of the interface `Data` for use with python lists."""

    def __init__(self, data: list, add_batch_dim: bool = False):
        """Create a new list data object.

        Args:
            data: The list of data
            add_batch_dim: If a batch dim of None, should be added to the element spec
        """
        self.data = data
        self.add_batch_dim = add_batch_dim

    def cardinality(self) -> int:
        """Get the cardinality of the dataset."""
        return len(self.data)

    @property
    def element_spec(self):
        """Get the element spec for the data.

        It is generated by looking at the first element in the list
        """
        def make_spec(el):
            """Make the dataspec from the first element of the list"""
            shape = (None, *el.shape[:1]) if self.add_batch_dim else(*el.shape[:1], )
            shape = (*shape, *el.shape[1:])
            return Spec(shape=shape, dtype=el.dtype)
        return jax.tree_util.tree_map(make_spec, self.data[0])

    def take(self, n: int) -> ListData:
        """Take N elements.

        Args:
            n: The number of elements to take

        Returns:
            A new dataset with n elements sliced from the list.
        """
        return ListData(self.data[:n], self.add_batch_dim)

    def as_numpy_iterator(self):
        """Create an ittrator """
        for x in self.data:
            yield x

    def map(self, f, *args, **kwargs):
        print("Warning: you called map")
        return ListData(list(map(f, self.data)), self.add_batch_dim)
